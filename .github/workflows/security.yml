name: 🔒 Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 🔍 Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        
    - name: 📊 Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('semgrep.sarif') != ''
      with:
        sarif_file: 'semgrep.sarif'
      continue-on-error: true
        
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 🔍 Run npm audit
      run: |
        echo "Running npm audit for all services..."
        
        # Function to run audit safely
        run_audit() {
          local service_path=$1
          local service_name=$2
          
          if [ -f "$service_path/package.json" ]; then
            echo "Auditing $service_name..."
            cd "$service_path"
            
            # Install dependencies first if node_modules doesn't exist
            if [ ! -d "node_modules" ]; then
              echo "Installing dependencies for $service_name..."
              npm install --production --silent
            fi
            
            # Run audit
            npm audit --audit-level moderate --json > "../../../${service_name}-audit.json" 2>/dev/null || true
            npm audit --audit-level moderate || echo "$service_name audit completed with issues"
            
            cd - > /dev/null
          else
            echo "No package.json found for $service_name at $service_path"
          fi
        }
        
        # Audit each service
        run_audit "lugx-backend/services/user" "user"
        run_audit "lugx-backend/services/game" "game" 
        run_audit "lugx-backend/services/order" "order"
        run_audit "lugx-backend/services/analytics" "analytics"
        # Check for frontend package.json too
        if [ -f "package.json" ]; then
          echo "Auditing root project..."
          npm install --production --silent 2>/dev/null || true
          npm audit --audit-level moderate --json > "root-audit.json" 2>/dev/null || true
          npm audit --audit-level moderate || echo "Root project audit completed with issues"
        fi
        
    - name: 📋 Generate Security Report
      if: always()
      run: |
        echo "## 🔒 Security Scan Report" > security-report.txt
        echo "**Date:** $(date)" >> security-report.txt
        echo "**Branch:** ${{ github.ref_name }}" >> security-report.txt
        echo "**Commit:** ${{ github.sha }}" >> security-report.txt
        echo "**Workflow Run:** ${{ github.run_number }}" >> security-report.txt
        echo "" >> security-report.txt
        echo "### 🔍 Security Scans Completed:" >> security-report.txt
        echo "- Trivy vulnerability scanner" >> security-report.txt
        echo "- Semgrep static analysis" >> security-report.txt
        echo "- npm audit for dependencies" >> security-report.txt
        echo "" >> security-report.txt
        echo "### 📊 Scan Results:" >> security-report.txt
        
        # Check Trivy results
        if [ -f "trivy-results.sarif" ]; then
          trivy_issues=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
          echo "- Trivy scan: $trivy_issues vulnerabilities found" >> security-report.txt
        else
          echo "- Trivy scan: No SARIF file generated" >> security-report.txt
        fi
        
        # Check Semgrep results
        if [ -f "semgrep.sarif" ]; then
          semgrep_issues=$(jq '.runs[0].results | length' semgrep.sarif 2>/dev/null || echo "0")
          echo "- Semgrep scan: $semgrep_issues issues found" >> security-report.txt
        elif [ -f "semgrep-results.json" ]; then
          semgrep_issues=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
          echo "- Semgrep scan: $semgrep_issues issues found" >> security-report.txt
        else
          echo "- Semgrep scan: Completed (check GitHub Security tab for results)" >> security-report.txt
        fi
        
        # Check npm audit results
        echo "- npm audit results:" >> security-report.txt
        for audit_file in *-audit.json; do
          if [ -f "$audit_file" ]; then
            service=$(basename "$audit_file" -audit.json)
            vulnerabilities=$(jq '.metadata.vulnerabilities.total' "$audit_file" 2>/dev/null || echo "0")
            echo "  - $service: $vulnerabilities vulnerabilities" >> security-report.txt
          fi
        done
        
    - name: 📤 Upload Security Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.run_number }}
        path: |
          security-report.txt
          *-audit.json
          trivy-results.sarif
          semgrep.sarif
        retention-days: 30
        
    - name: ✅ Security Summary
      if: always()
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔍 Security Scans:" >> $GITHUB_STEP_SUMMARY
        
        # Trivy results
        if [ -f "trivy-results.sarif" ]; then
          trivy_issues=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
          if [ "$trivy_issues" -eq 0 ]; then
            echo "- ✅ Trivy: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Trivy: $trivy_issues vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- ❌ Trivy: Scan failed or no results" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Semgrep results
        if [ -f "semgrep.sarif" ]; then
          semgrep_issues=$(jq '.runs[0].results | length' semgrep.sarif 2>/dev/null || echo "0")
          if [ "$semgrep_issues" -eq 0 ]; then
            echo "- ✅ Semgrep: No issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Semgrep: $semgrep_issues issues found" >> $GITHUB_STEP_SUMMARY
          fi
        elif [ -f "semgrep-results.json" ]; then
          semgrep_issues=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
          if [ "$semgrep_issues" -eq 0 ]; then
            echo "- ✅ Semgrep: No issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Semgrep: $semgrep_issues issues found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- ✅ Semgrep: Scan completed (check Security tab)" >> $GITHUB_STEP_SUMMARY
        fi
        
        # npm audit results
        echo "- npm audit:" >> $GITHUB_STEP_SUMMARY
        total_vulns=0
        for audit_file in *-audit.json; do
          if [ -f "$audit_file" ]; then
            service=$(basename "$audit_file" -audit.json)
            vulnerabilities=$(jq '.metadata.vulnerabilities.total' "$audit_file" 2>/dev/null || echo "0")
            total_vulns=$((total_vulns + vulnerabilities))
            if [ "$vulnerabilities" -eq 0 ]; then
              echo "  - ✅ $service: No vulnerabilities" >> $GITHUB_STEP_SUMMARY
            else
              echo "  - ⚠️ $service: $vulnerabilities vulnerabilities" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "$total_vulns" -eq 0 ]; then
          echo "🎉 **Overall Status: SECURE** - No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Overall Status: REVIEW NEEDED** - $total_vulns total vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi